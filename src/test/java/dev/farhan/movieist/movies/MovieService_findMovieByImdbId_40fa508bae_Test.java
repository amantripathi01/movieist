// Test generated by RoostGPT for test springMongoDB using AI Type Open AI and AI Model gpt-4

package dev.farhan.movieist.movies;

import org.springframework.beans.factory.annotation.Autowired;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.Mockito;
import org.mockito.InjectMocks;
import java.util.ArrayList;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

@ExtendWith(MockitoExtension.class)
public class MovieService_findMovieByImdbId_40fa508bae_Test {

    @Mock
    private MovieRepository repository;

    @InjectMocks
    private MovieService movieService;

    private Movie movie;

    @BeforeEach
    public void setup() {
        movie = new Movie();
        movie.setImdbId("tt0111161");
        movie.setTitle("The Shawshank Redemption");
    }

    @Test
    public void testFindMovieByImdbIdSuccess() {
        Mockito.when(repository.findMovieByImdbId("tt0111161")).thenReturn(Optional.of(movie));
        Optional<Movie> result = movieService.findMovieByImdbId("tt0111161");
        assertTrue(result.isPresent());
        assertEquals(movie.getImdbId(), result.get().getImdbId());
    }

    @Test
    public void testFindMovieByImdbIdFailure() {
        Mockito.when(repository.findMovieByImdbId("tt0111161")).thenReturn(Optional.empty());
        Optional<Movie> result = movieService.findMovieByImdbId("tt0111161");
        assertTrue(result.isEmpty());
    }
}
