// Test generated by RoostGPT for test springMongoDB using AI Type Open AI and AI Model gpt-4

package dev.farhan.movieist.movies;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Optional;

import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

@ExtendWith(MockitoExtension.class)
public class MovieService_findMovieByImdbId_40fa508bae_Test {

    @Mock
    private MovieRepository repository;

    @InjectMocks
    private MovieService movieService;

    @Test
    public void testFindMovieByImdbId_ValidImdbId() {
        String imdbId = "tt0111161"; // TODO: replace with valid IMDB ID
        Movie expectedMovie = new Movie(); // assuming default constructor exists in Movie class
        // expectedMovie.setImdbId(imdbId); // assuming setter exists in Movie class

        when(repository.findMovieByImdbId(imdbId)).thenReturn(Optional.of(expectedMovie));

        Optional<Movie> actualMovie = movieService.findMovieByImdbId(imdbId);

        verify(repository).findMovieByImdbId(imdbId);
        assertTrue(actualMovie.isPresent());
        assertEquals(expectedMovie, actualMovie.get());
    }

    @Test
    public void testFindMovieByImdbId_InvalidImdbId() {
        String imdbId = "invalid_imdb_id"; // TODO: replace with invalid IMDB ID

        when(repository.findMovieByImdbId(imdbId)).thenReturn(Optional.empty());

        Optional<Movie> actualMovie = movieService.findMovieByImdbId(imdbId);

        verify(repository).findMovieByImdbId(imdbId);
        assertTrue(actualMovie.isEmpty());
    }
}
