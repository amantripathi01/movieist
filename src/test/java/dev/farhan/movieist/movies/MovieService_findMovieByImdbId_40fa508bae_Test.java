// Test generated by RoostGPT for test springMongoDB using AI Type Open AI and AI Model gpt-4

package dev.farhan.movieist.movies;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@SpringBootTest
public class MovieService_findMovieByImdbId_40fa508bae_Test {

    @InjectMocks
    private MovieService movieService;

    @Mock
    private MovieRepository repository;

    private Movie movie;
    private String imdbId = "tt3896198";

    @BeforeEach
    public void setUp() {
        movie = new Movie();
        movie.setImdbId(imdbId);
    }

    @Test
    public void testFindMovieByImdbId_Success() {
        when(repository.findMovieByImdbId(imdbId)).thenReturn(Optional.of(movie));

        Optional<Movie> result = movieService.findMovieByImdbId(imdbId);

        assertTrue(result.isPresent());
        assertEquals(imdbId, result.get().getImdbId());
        verify(repository, times(1)).findMovieByImdbId(imdbId);
    }

    @Test
    public void testFindMovieByImdbId_Failure() {
        when(repository.findMovieByImdbId(imdbId)).thenReturn(Optional.empty());

        Optional<Movie> result = movieService.findMovieByImdbId(imdbId);

        assertFalse(result.isPresent());
        verify(repository, times(1)).findMovieByImdbId(imdbId);
    }
}
