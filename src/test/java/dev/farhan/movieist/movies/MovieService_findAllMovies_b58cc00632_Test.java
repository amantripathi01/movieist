// ********RoostGPT********
/*
Test generated by RoostGPT for test addTest using AI Type Open Source AI and AI Model meta-llama/Llama-2-13b-chat

Sure, here are some test scenarios you can use to validate the business logic of the `findAllMovies` method:

1. **Test when there are no movies in the database**

   - Expected Result: An empty list is returned.
   - Test Steps: Call `findAllMovies` method.
   - Verification: Check if the returned list is empty.

2. **Test when there are movies in the database**

   - Expected Result: A list of movies is returned.
   - Test Steps: Add some movies to the database and then call `findAllMovies` method.
   - Verification: Check if the returned list is not empty and contains the added movies.

3. **Test when the database is empty**

   - Expected Result: An empty list is returned.
   - Test Steps: Clear the database and then call `findAllMovies` method.
   - Verification: Check if the returned list is empty.

4. **Test when the database is not available**

   - Expected Result: An exception is thrown.
   - Test Steps: Simulate a database outage by stopping the database service and then call `findAllMovies` method.
   - Verification: Check if the thrown exception is of the expected type and has the expected message.

5. **Test when the repository throws an exception**

   - Expected Result: The exception is propagated to the caller.
   - Test Steps: Simulate a repository exception by making the `findAll` method in the repository throw an exception.
   - Verification: Check if the thrown exception is of the expected type and has the expected message.

Please note that these are just test scenarios. The actual implementation of these scenarios will depend on the specifics of your application and the libraries you are using.

*/

// ********RoostGPT********
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class MovieService_findAllMovies_b58cc00632_Test {

    @Mock
    private MovieRepository repository;

    @InjectMocks
    private MovieService movieService;

    @Test
    public void testFindAllMovies_success() {
        List<Movie> expectedMovies = new ArrayList<>();
        expectedMovies.add(new Movie(1, "Movie 1", "Genre 1"));
        expectedMovies.add(new Movie(2, "Movie 2", "Genre 2"));

        when(repository.findAll()).thenReturn(expectedMovies);

        List<Movie> actualMovies = movieService.findAllMovies();

        assertEquals(expectedMovies, actualMovies);
    }

    @Test
    public void testFindAllMovies_noMovies() {
        when(repository.findAll()).thenReturn(new ArrayList<>());

        List<Movie> actualMovies = movieService.findAllMovies();

        assertEquals(0, actualMovies.size());
    }
}
