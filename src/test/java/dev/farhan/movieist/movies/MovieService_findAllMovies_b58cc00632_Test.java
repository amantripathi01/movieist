// Test generated by RoostGPT for test sampleTest using AI Type Open AI and AI Model gpt-4

/*
1. **Scenario**: Test to validate that the function returns a list of movies when the repository contains multiple movies.

    **Expected Result**: The function should return a list of all movies present in the repository.

2. **Scenario**: Test to validate that the function returns an empty list when the repository does not contain any movie.

    **Expected Result**: The function should return an empty list.

3. **Scenario**: Test to validate that the function returns a list of movies when the repository contains one movie.

    **Expected Result**: The function should return a list with one movie.

4. **Scenario**: Test to validate that the function does not return null when the repository is empty.

    **Expected Result**: The function should return an empty list, not null.

5. **Scenario**: Test to validate that the function returns a list with the correct order of movies as they are present in the repository.

    **Expected Result**: The function should return a list of movies in the same order as they are present in the repository.

6. **Scenario**: Test to validate that the function returns a list of movies with correct data when the repository contains movies with different data.

    **Expected Result**: The function should return a list of movies with correct data.

7. **Scenario**: Test to validate the function's behavior when the repository throws an exception.

    **Expected Result**: The function should handle the exception properly.

8. **Scenario**: Test to validate that the function does not modify the movies in the repository.

    **Expected Result**: The original movies in the repository should not be modified after the function call.

9. **Scenario**: Test to validate that the function can handle large amount of movies in the repository.

    **Expected Result**: The function should be able to return a list of all movies, even if the repository contains a large amount of movies.

10. **Scenario**: Test to validate that the function returns a list of unique movies when the repository contains duplicate movies.

    **Expected Result**: The function should return a list of unique movies.
*/
package dev.farhan.movieist.movies;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

@ExtendWith(MockitoExtension.class)
public class MovieService_findAllMovies_b58cc00632_Test {

    @Mock
    private MovieRepository repository;

    @InjectMocks
    private MovieService movieService;

    private Movie movie1;
    private Movie movie2;

    @BeforeEach
    public void setUp() {
        movie1 = new Movie();
        movie2 = new Movie();
    }

    @Test
    public void testFindAllMovies_MultipleMovies() {
        when(repository.findAll()).thenReturn(Arrays.asList(movie1, movie2));

        List<Movie> movies = movieService.findAllMovies();

        assertEquals(2, movies.size());
        assertSame(movie1, movies.get(0));
        assertSame(movie2, movies.get(1));
    }

    @Test
    public void testFindAllMovies_NoMovies() {
        when(repository.findAll()).thenReturn(Collections.emptyList());

        List<Movie> movies = movieService.findAllMovies();

        assertTrue(movies.isEmpty());
    }

    @Test
    public void testFindAllMovies_OneMovie() {
        when(repository.findAll()).thenReturn(Collections.singletonList(movie1));

        List<Movie> movies = movieService.findAllMovies();

        assertEquals(1, movies.size());
        assertSame(movie1, movies.get(0));
    }

    @Test
    public void testFindAllMovies_NotNull() {
        when(repository.findAll()).thenReturn(null);

        List<Movie> movies = movieService.findAllMovies();

        assertNotNull(movies);
    }
}
