// ********RoostGPT********
/*
Test generated by RoostGPT for test addTest using AI Type Open Source AI and AI Model meta-llama/Llama-2-13b-chat

Sure, here are some test scenarios you can use to validate the business logic of the `getSingleMovie` method:

1. **Test with a valid IMDB ID**:
   - Scenario: The method should return a `ResponseEntity` with a `Movie` object when the IMDB ID is valid.
   - Expected Result: The method should return a `ResponseEntity` with a `Movie` object and a `HttpStatus.OK`.

2. **Test with an invalid IMDB ID**:
   - Scenario: The method should return a `ResponseEntity` with an empty `Optional` when the IMDB ID is invalid.
   - Expected Result: The method should return a `ResponseEntity` with an empty `Optional` and a `HttpStatus.OK`.

3. **Test with a null IMDB ID**:
   - Scenario: The method should return a `ResponseEntity` with an empty `Optional` when the IMDB ID is null.
   - Expected Result: The method should return a `ResponseEntity` with an empty `Optional` and a `HttpStatus.OK`.

4. **Test with an empty IMDB ID**:
   - Scenario: The method should return a `ResponseEntity` with an empty `Optional` when the IMDB ID is empty.
   - Expected Result: The method should return a `ResponseEntity` with an empty `Optional` and a `HttpStatus.OK`.

5. **Test with a non-existing IMDB ID**:
   - Scenario: The method should return a `ResponseEntity` with an empty `Optional` when the IMDB ID does not exist in the database.
   - Expected Result: The method should return a `ResponseEntity` with an empty `Optional` and a `HttpStatus.OK`.

Please note that these test scenarios are based on the assumption that the `service.findMovieByImdbId(imdbId)` method returns an `Optional<Movie>`. If it returns a `Movie` directly, you might need to adjust the test scenarios accordingly.

*/

// ********RoostGPT********
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

import java.util.Optional;

@WebMvcTest(MovieController.class)
public class MovieController_getSingleMovie_2d5110716e_Test {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private MovieService service;

    @Test
    public void testGetSingleMovie_Success() throws Exception {
        Movie movie = new Movie("tt1234567", "Test Movie", "Test Director");
        Mockito.when(service.findMovieByImdbId("tt1234567")).thenReturn(Optional.of(movie));

        mockMvc.perform(MockMvcRequestBuilders.get("/movies/tt1234567"))
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath("$.imdbId").value("tt1234567"))
                .andExpect(MockMvcResultMatchers.jsonPath("$.title").value("Test Movie"))
                .andExpect(MockMvcResultMatchers.jsonPath("$.director").value("Test Director"));
    }

    @Test
    public void testGetSingleMovie_NotFound() throws Exception {
        Mockito.when(service.findMovieByImdbId("tt1234567")).thenReturn(Optional.empty());

        mockMvc.perform(MockMvcRequestBuilders.get("/movies/tt1234567"))
                .andExpect(MockMvcResultMatchers.status().isNotFound());
    }
}
