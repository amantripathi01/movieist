// Test generated by RoostGPT for test springMongoDB using AI Type Open AI and AI Model gpt-4

package dev.farhan.movieist.movies;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.util.List;
import java.util.Optional;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.anyString;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class MovieController_getSingleMovie_2d5110716e_Test {

    @InjectMocks
    MovieController movieController;
    
    @Mock
    MovieService service;

    @Test
    public void testGetSingleMovie_ValidImdbId() {
        Movie movie = new Movie();
        movie.setImdbId("tt0111161");
        Optional<Movie> optionalMovie = Optional.of(movie);
        when(service.findMovieByImdbId(anyString())).thenReturn(optionalMovie);
        
        ResponseEntity<Optional<Movie>> response = movieController.getSingleMovie("tt0111161");

        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(optionalMovie, response.getBody());
    }

    @Test
    public void testGetSingleMovie_InvalidImdbId() {
        when(service.findMovieByImdbId(anyString())).thenReturn(Optional.empty());
        
        ResponseEntity<Optional<Movie>> response = movieController.getSingleMovie("invalid_imdb_id");

        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(Optional.empty(), response.getBody());
    }
}
