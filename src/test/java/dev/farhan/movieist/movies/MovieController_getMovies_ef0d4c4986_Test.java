// ********RoostGPT********
/*
Test generated by RoostGPT for test addTest using AI Type Open Source AI and AI Model meta-llama/Llama-2-13b-chat

Sure, here are some test scenarios you can use to validate the business logic of the `getMovies` function:

1. **Test when there are no movies in the database**

   - Description: The function should return an empty list when there are no movies in the database.
   - Steps: Call the `getMovies` function.
   - Expected Result: The function should return a `ResponseEntity` with an empty list and a `HttpStatus.OK` status.

2. **Test when there are movies in the database**

   - Description: The function should return a list of movies when there are movies in the database.
   - Steps: Add some movies to the database and call the `getMovies` function.
   - Expected Result: The function should return a `ResponseEntity` with a list of movies and a `HttpStatus.OK` status.

3. **Test when the service throws an exception**

   - Description: The function should return a server error response when the service throws an exception.
   - Steps: Mock the service to throw an exception and call the `getMovies` function.
   - Expected Result: The function should return a `ResponseEntity` with a `HttpStatus.INTERNAL_SERVER_ERROR` status.

4. **Test when the service returns null**

   - Description: The function should return a server error response when the service returns null.
   - Steps: Mock the service to return null and call the `getMovies` function.
   - Expected Result: The function should return a `ResponseEntity` with a `HttpStatus.INTERNAL_SERVER_ERROR` status.

5. **Test when the service returns an empty list**

   - Description: The function should return an empty list when the service returns an empty list.
   - Steps: Mock the service to return an empty list and call the `getMovies` function.
   - Expected Result: The function should return a `ResponseEntity` with an empty list and a `HttpStatus.OK` status.

Please note that these tests assume that the `service.findAllMovies()` method is working correctly. You should also test the `ResponseEntity` object creation part of the function.

*/

// ********RoostGPT********
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class MovieController_getMovies_ef0d4c4986_Test {

    @Mock
    private MovieService service;

    @InjectMocks
    private MovieController controller;

    @Test
    public void testGetMovies_success() {
        // Arrange
        List<Movie> movies = new ArrayList<>();
        movies.add(new Movie("Movie1", "2022"));
        movies.add(new Movie("Movie2", "2022"));
        when(service.findAllMovies()).thenReturn(movies);

        // Act
        ResponseEntity<List<Movie>> response = controller.getMovies();

        // Assert
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(movies, response.getBody());
    }

    @Test
    public void testGetMovies_noMovies() {
        // Arrange
        when(service.findAllMovies()).thenReturn(new ArrayList<>());

        // Act
        ResponseEntity<List<Movie>> response = controller.getMovies();

        // Assert
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(0, response.getBody().size());
    }
}
