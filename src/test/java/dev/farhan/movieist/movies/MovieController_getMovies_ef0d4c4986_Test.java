// Test generated by RoostGPT for test sampleTest using AI Type Open AI and AI Model gpt-4

/*
1. Test Scenario: Validate if the function `getMovies` returns a `ResponseEntity` containing a list of all movies present in the database.
   
2. Test Scenario: Check if the `getMovies` function returns an HTTP status code of 200, indicating a successful operation. 

3. Test Scenario: Validate if the `getMovies` function returns an empty list when there are no movies present in the database. 

4. Test Scenario: Check if the `getMovies` function returns a list of movies in the expected format (as defined by the `Movie` class). 

5. Test Scenario: Check if the `getMovies` function is able to handle exceptions properly. For instance, if the `service.findAllMovies()` method throws an exception, the function should handle it gracefully and not crash the application.

6. Test Scenario: Validate if the `getMovies` function successfully retrieves movies when there are a large number of movies in the database. 

7. Test Scenario: Check if the `getMovies` function returns an appropriate error message or status code when the `service.findAllMovies()` method is unable to connect to the database. 

8. Test Scenario: Validate if the `getMovies` function is able to handle and return movies with special characters or non-English characters in their names.

9. Test Scenario: Check if the `getMovies` function is able to handle and return movies with null or missing fields in their details.

10. Test Scenario: Validate if the `getMovies` function is able to handle concurrent requests without any data inconsistency.

*/
package dev.farhan.movieist.movies;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.boot.test.context.SpringBootTest;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Arrays;
import java.util.Collections;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@SpringBootTest
public class MovieController_getMovies_ef0d4c4986_Test {

    @InjectMocks
    private MovieController movieController;

    @Mock
    private MovieService movieService;

    private Movie movie1;
    private Movie movie2;

    @BeforeEach
    void setUp() {
        movie1 = new Movie("tt0111161", "The Shawshank Redemption", "1994", "8.9", "Frank Darabont");
        movie2 = new Movie("tt0068646", "The Godfather", "1972", "9.2", "Francis Ford Coppola");
    }

    @Test
    @DisplayName("Test Scenario 1: Validate if the function `getMovies` returns a `ResponseEntity` containing a list of all movies present in the database.")
    public void testGetMovies() {
        when(movieService.findAllMovies()).thenReturn(Arrays.asList(movie1, movie2));

        ResponseEntity<List<Movie>> response = movieController.getMovies();

        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(2, response.getBody().size());
        assertTrue(response.getBody().containsAll(Arrays.asList(movie1, movie2)));
    }

    @Test
    @DisplayName("Test Scenario 3: Validate if the `getMovies` function returns an empty list when there are no movies present in the database.")
    public void testGetMoviesWhenNoMoviesPresent() {
        when(movieService.findAllMovies()).thenReturn(Collections.emptyList());

        ResponseEntity<List<Movie>> response = movieController.getMovies();

        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(0, response.getBody().size());
    }

    @Test
    @DisplayName("Test Scenario 5: Check if the `getMovies` function is able to handle exceptions properly.")
    public void testGetMoviesWhenServiceThrowsException() {
        when(movieService.findAllMovies()).thenThrow(new RuntimeException("Database Connection Error"));

        Exception exception = assertThrows(RuntimeException.class, () -> movieController.getMovies());

        assertEquals("Database Connection Error", exception.getMessage());
    }
}
